
// Euler problem 12:
//
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have
// over five hundred divisors?

use structopt::StructOpt;

#[derive(StructOpt)]
struct Opt {
    /// Number of divisors
    #[structopt(short, long, default_value = "5")]
    divisors: u64,
}

fn count_divisors(number: u64)-> u64 {
    let mut count: u64 = 1;
    for i in 1..(number/2 + 1) {
        if number % i == 0 {
            count += 1
        }
    }

    return count
}

fn find_triangle_number(divisor: u64)-> u64 {
    let mut how_many: u64 = 0;
    let mut value: u64 = 1;
    let mut increment: u64 = 2;
    while how_many < divisor {
        value += increment;
        increment += 1;
        how_many = count_divisors(value);
    }
    return value
}

fn main() {
    let args = Opt::from_args();
    println!("Find the first triangle number to have over {} divisors", args.divisors);
    println!("Triangle number is: {}", find_triangle_number(args.divisors));
}
