#!/usr/bin/env python3

"""
Euler problem 12:

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have
over five hundred divisors?
"""


def count_divisors(num):
    if num == 0:
        return 0
    divisors = 1
    current = num
    # Handle factor 2
    exponent = 0
    while current % 2 == 0:
        exponent += 1
        current //= 2
    if exponent > 0:
        divisors *= (exponent + 1)
    # Check odd factors
    i = 3
    while i * i <= current:
        exponent = 0
        while current % i == 0:
            exponent += 1
            current //= i
        if exponent > 0:
            divisors *= (exponent + 1)
        i += 2
    # Remaining prime factor
    if current > 1:
        divisors *= 2
    return divisors


def euler_0012(target):
    n = 1
    while True:
        if n % 2 == 0:
            a, b = n // 2, n + 1
        else:
            a, b = n, (n + 1) // 2
        if count_divisors(a) * count_divisors(b) > target:
            return a * b
        n += 1


if __name__ == '__main__':
    print("Problem 0012: The first triangular number with over 500 divisors " +
          f"is: {euler_0012(500)}")
